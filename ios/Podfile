# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Uncomment to use_frameworks globally if needed
# use_frameworks!

linkage = ENV['USE_FRAMEWORKS']

# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

target 'crypto_monitor_client' do
  config = use_native_modules!
  use_frameworks! :linkage => :static

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Firebase and Google Utilities with modular headers
  pod 'Firebase/Core', :modular_headers => true
  pod 'Firebase/Auth', :modular_headers => true
  pod 'Firebase/Firestore', :modular_headers => true
  pod 'Firebase/Database', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseCoreExtension', :modular_headers => true
  pod 'FirebaseFirestoreInternal', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'leveldb-library', :modular_headers => true
  pod 'FirebaseAppCheckInterop', :modular_headers => true
  pod 'FirebaseAuthInterop', :modular_headers => true

  target 'crypto_monitor_clientTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # Ensure module map generation for GoogleUtilities and other Firebase dependencies
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 10.0
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '10.0'
        end
        if ['GoogleUtilities', 'FirebaseCore', 'FirebaseCoreExtension', 'FirebaseFirestoreInternal', 'FirebaseCoreInternal', 'leveldb-library', 'FirebaseAppCheckInterop', 'FirebaseAuthInterop'].include?(target.name)
          config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        end
      end
    end

    # Ensure other necessary post install configurations
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
  end
end
